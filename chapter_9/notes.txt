9.1 Unrecoverable errors
Rust uses panic! macro for unrecoverable errors
You can in fact call panic! on your own

panic! prints a failure message,unwinds, cleans up the stack, then quits.
You can instead abort completely insteadof unwinding the stack byusin panic = 'abort' ifyou need the resulting binary to be small.

using panic!:
panic!("crash and burn");

Panic has a backtrace feature
Example: RUST_BACKTRACE=1 cargo run

9.2 Recoverable Errors with Result
Recoverable errors return a Result<T, E> type
Example use:
fn main() {
    let greeting_file_result = File::open("hello.txt");

    let greeting_file = match greeting_file_result {
        Ok(file) => file,
        Err(error) => match error.kind() {
            ErrorKind::NotFound => match File::create("hello.txt") {
                Ok(fc) => fc,
                Err(e) => panic!("Problem creating the file: {:?}", e),
            },
            other_error => {
                panic!("Problem opening the file: {:?}", other_error);
            }
        },
    };
}
Example2: 
fn main() {
    let greeting_file = File::open("hello.txt").unwrap_or_else(|error| {
        if error.kind() == ErrorKind::NotFound {
            File::create("hello.txt").unwrap_or_else(|error| {
                panic!("Problem creating the file: {:?}", error);
            })
        } else {
            panic!("Problem opening the file: {:?}", error);
        }
    });
}

functions to make the result variable easier to use
unwrap() if error will panic, otherwise will return the T value.
expect works almost the same,but can allow you togivebetter error messages.

You can propogatean error message back up the stack using the ? operator
fn read_username_from_file() -> Result<String, io::Error> {
    let mut username_file = File::open("hello.txt")?;
    let mut username = String::new();
    username_file.read_to_string(&mut username)?;
    Ok(username)
}
OR
fn read_username_from_file() -> Result<String, io::Error> {
    let mut username = String::new();

    File::open("hello.txt")?.read_to_string(&mut username)?;

    Ok(username)
}

? can only be used in functions whose reutn type is compatible with the value the ? isused on.
text.lines().next()?.chars().last()

We can also return a result from main
fn main() -> Result<(), Box<dyn Error>> {
    let greeting_file = File::open("hello.txt")?;

    Ok(())
}
Box<dyn Error> type is a trait object

9.3 To panic! or not to panic!




